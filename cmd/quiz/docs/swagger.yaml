basePath: /api
definitions:
  app_pkg_article_domain_entity.Article:
    properties:
      categories:
        items:
          $ref: '#/definitions/app_pkg_article_domain_entity.Category'
        type: array
      content:
        description: HTML content
        type: string
      createdAt:
        type: string
      id:
        type: integer
      publishedAt:
        type: string
      slug:
        type: string
      tags:
        items:
          $ref: '#/definitions/app_pkg_article_domain_entity.Tag'
        type: array
      thumbnail:
        $ref: '#/definitions/app_pkg_article_domain_entity.File'
      thumbnailId:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    type: object
  app_pkg_article_domain_entity.ArticleDTO:
    properties:
      categoryIds:
        items:
          type: integer
        type: array
      content:
        type: string
      publishedAt:
        type: string
      slug:
        type: string
      tagIds:
        items:
          type: integer
        type: array
      thumbnailId:
        type: integer
      title:
        type: string
    required:
    - content
    - title
    type: object
  app_pkg_article_domain_entity.Category:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      parentId:
        description: Self-referencing relationship for nested categories
        type: integer
      slug:
        type: string
      updatedAt:
        type: string
    type: object
  app_pkg_article_domain_entity.CategoryDTO:
    properties:
      description:
        type: string
      name:
        type: string
      parentId:
        type: integer
      slug:
        type: string
    required:
    - name
    type: object
  app_pkg_article_domain_entity.File:
    properties:
      contentType:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      path:
        type: string
      size:
        type: integer
      updatedAt:
        type: string
    type: object
  app_pkg_article_domain_entity.Tag:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
      updatedAt:
        type: string
    type: object
  app_pkg_article_domain_entity.TagDTO:
    properties:
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    required:
    - name
    type: object
  app_pkg_quiz_domain_entity.Answer:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      question:
        $ref: '#/definitions/app_pkg_quiz_domain_entity.Question'
      text:
        type: string
      updatedAt:
        type: string
      value:
        type: integer
    type: object
  app_pkg_quiz_domain_entity.AnswerDTO:
    properties:
      question:
        type: integer
      text:
        type: string
      value:
        type: integer
    required:
    - text
    - value
    type: object
  app_pkg_quiz_domain_entity.LoginDTO:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  app_pkg_quiz_domain_entity.Option:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      isCorrect:
        type: boolean
      questionId:
        type: integer
      updatedAt:
        type: string
    type: object
  app_pkg_quiz_domain_entity.OptionDTO:
    properties:
      content:
        type: string
      isCorrect:
        type: boolean
    required:
    - content
    type: object
  app_pkg_quiz_domain_entity.Question:
    properties:
      answers:
        items:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.Answer'
        type: array
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      options:
        items:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.Option'
        type: array
      quizId:
        type: integer
      updatedAt:
        type: string
    type: object
  app_pkg_quiz_domain_entity.QuestionDTO:
    properties:
      answers:
        items:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.AnswerDTO'
        type: array
      content:
        type: string
      options:
        items:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.OptionDTO'
        type: array
      quizId:
        type: integer
    required:
    - content
    - quizId
    type: object
  app_pkg_quiz_domain_entity.Quiz:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      questions:
        items:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.Question'
        type: array
      updatedAt:
        type: string
    type: object
  app_pkg_quiz_domain_entity.QuizDTO:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  app_pkg_quiz_domain_entity.RegisterDTO:
    properties:
      birthDate:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      status:
        type: boolean
      username:
        type: string
    required:
    - birthDate
    - name
    - password
    - role
    - status
    - username
    type: object
  app_pkg_quiz_domain_entity.Submission:
    properties:
      answer:
        $ref: '#/definitions/app_pkg_quiz_domain_entity.Answer'
      createdAt:
        type: string
      id:
        type: integer
      question:
        $ref: '#/definitions/app_pkg_quiz_domain_entity.Question'
      quiz:
        $ref: '#/definitions/app_pkg_quiz_domain_entity.Quiz'
      updatedAt:
        type: string
    type: object
  app_pkg_quiz_domain_entity.SubmissionDTO:
    properties:
      answer:
        type: integer
      question:
        type: integer
      quiz:
        type: integer
      user:
        type: integer
    required:
    - answer
    - question
    - quiz
    - user
    type: object
  app_pkg_quiz_domain_entity.SubmissionInsertDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.SubmissionDTO'
        type: array
    required:
    - data
    type: object
  app_pkg_quiz_domain_entity.User:
    properties:
      birthDate:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      status:
        type: boolean
      updatedAt:
        type: string
      username:
        type: string
    type: object
  app_pkg_quiz_domain_entity.UserDTO:
    properties:
      birthDate:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      status:
        type: boolean
      username:
        type: string
    required:
    - birthDate
    - name
    - password
    - role
    - status
    - username
    type: object
  app_pkg_quiz_services_auth.Claims:
    properties:
      aud:
        description: the `aud` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3
        items:
          type: string
        type: array
      exp:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `exp` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4
      iat:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `iat` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6
      iss:
        description: the `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1
        type: string
      jti:
        description: the `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7
        type: string
      nbf:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `nbf` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5
      role:
        type: string
      sub:
        description: the `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  http.GeneralResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
  http.PaginatedResponse:
    properties:
      metadata:
        $ref: '#/definitions/pagination.Metadata'
      result:
        items: {}
        type: array
    type: object
  jwt.NumericDate:
    properties:
      time.Time:
        type: string
    type: object
  pagination.Metadata:
    properties:
      count:
        type: integer
      hasNext:
        type: boolean
      hasPrev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  validation.ValidationError:
    properties:
      errors:
        additionalProperties:
          type: string
        type: object
    type: object
host: 157.245.61.194:8082
info:
  contact:
    email: support@nosmo.com
    name: API Support
    url: http://www.nosmo.com/support
  description: This is a Quiz application API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Quiz API
  version: "1.0"
paths:
  /answers:
    get:
      consumes:
      - application/json
      description: Get all answers with pagination and filtering options
      parameters:
      - description: Filter by question ID
        in: query
        name: questionId
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/http.PaginatedResponse'
                  - properties:
                      result:
                        items:
                          $ref: '#/definitions/app_pkg_quiz_domain_entity.Answer'
                        type: array
                    type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Get all answers
      tags:
      - answers
    post:
      consumes:
      - application/json
      description: Create a new answer with the provided information
      parameters:
      - description: Answer information
        in: body
        name: answer
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.AnswerDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Create a new answer
      tags:
      - answers
  /answers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an answer by its ID
      parameters:
      - description: Answer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Delete an answer
      tags:
      - answers
    get:
      consumes:
      - application/json
      description: Get details of a specific answer by its ID
      parameters:
      - description: Answer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Get answer by ID
      tags:
      - answers
    put:
      consumes:
      - application/json
      description: Update an answer with the provided information
      parameters:
      - description: Answer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated answer information
        in: body
        name: answer
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.AnswerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Update an existing answer
      tags:
      - answers
  /articles:
    get:
      consumes:
      - application/json
      description: Get all articles with pagination and filtering options
      parameters:
      - description: Search keyword
        in: query
        name: keyword
        type: string
      - description: Filter by category ID
        in: query
        name: categoryId
        type: integer
      - description: Filter by published status
        in: query
        name: published
        type: boolean
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/app_pkg_article_domain_entity.Article'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all articles
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create a new article with the provided information
      parameters:
      - description: Article information
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/app_pkg_article_domain_entity.ArticleDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Article'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new article
      tags:
      - articles
  /articles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an article by its ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete an article
      tags:
      - articles
    put:
      consumes:
      - application/json
      description: Update an article with the provided information
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated article information
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/app_pkg_article_domain_entity.ArticleDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Article'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update an existing article
      tags:
      - articles
  /articles/{slug}:
    get:
      consumes:
      - application/json
      description: Get details of a specific article by its slug
      parameters:
      - description: Article slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Article'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get article by slug
      tags:
      - articles
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password to get an authentication token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - description: User registration information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.RegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      summary: Register a new user
      tags:
      - auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Verify the current user's authentication token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_services_auth.Claims'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Verify authentication token
      tags:
      - auth
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories with pagination and filtering options
      parameters:
      - description: Search keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/app_pkg_article_domain_entity.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided information
      parameters:
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/app_pkg_article_domain_entity.CategoryDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get details of a specific category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update a category with the provided information
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/app_pkg_article_domain_entity.CategoryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update an existing category
      tags:
      - categories
  /categories/{id}/children:
    get:
      consumes:
      - application/json
      description: Get all direct child categories of a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/app_pkg_article_domain_entity.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get category children
      tags:
      - categories
  /categories/{id}/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchy (ancestors and descendants) of a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get category hierarchy
      tags:
      - categories
  /categories/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Get details of a specific category by its slug
      parameters:
      - description: Category slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get category by slug
      tags:
      - categories
  /questions:
    get:
      consumes:
      - application/json
      description: Get all questions with pagination and filtering options
      parameters:
      - description: Filter by quiz ID
        in: query
        name: quizId
        type: integer
      - description: Search keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/http.PaginatedResponse'
                  - properties:
                      result:
                        items:
                          $ref: '#/definitions/app_pkg_quiz_domain_entity.Question'
                        type: array
                    type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      summary: Get all questions
      tags:
      - questions
    post:
      consumes:
      - application/json
      description: Create a new question with the provided information
      parameters:
      - description: Question information
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.QuestionDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Question'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Create a new question
      tags:
      - questions
  /questions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a question by its ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Delete a question
      tags:
      - questions
    get:
      consumes:
      - application/json
      description: Get details of a specific question by its ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Question'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      summary: Get question by ID
      tags:
      - questions
    put:
      consumes:
      - application/json
      description: Update a question with the provided information
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated question information
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.QuestionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Question'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Update an existing question
      tags:
      - questions
  /quizzes:
    get:
      consumes:
      - application/json
      description: Get all quizzes with pagination and filtering options
      parameters:
      - description: Search keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/http.PaginatedResponse'
                  - properties:
                      result:
                        items:
                          $ref: '#/definitions/app_pkg_quiz_domain_entity.Quiz'
                        type: array
                    type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      summary: Get all quizzes
      tags:
      - quizzes
    post:
      consumes:
      - application/json
      description: Create a new quiz with the provided information
      parameters:
      - description: Quiz information
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.QuizDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Quiz'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Create a new quiz
      tags:
      - quizzes
  /quizzes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a quiz by its ID
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Delete a quiz
      tags:
      - quizzes
    get:
      consumes:
      - application/json
      description: Get details of a specific quiz by its ID
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Quiz'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get quiz by ID
      tags:
      - quizzes
    put:
      consumes:
      - application/json
      description: Update a quiz with the provided information
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated quiz information
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.QuizDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Quiz'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.GeneralResponse'
      security:
      - BearerAuth: []
      summary: Update an existing quiz
      tags:
      - quizzes
  /submissions:
    get:
      consumes:
      - application/json
      description: Get all submissions with pagination and filtering options
      parameters:
      - description: Filter by quiz ID
        in: query
        name: quizId
        type: integer
      - description: Filter by user ID
        in: query
        name: userId
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/http.PaginatedResponse'
                  - properties:
                      result:
                        items:
                          $ref: '#/definitions/app_pkg_quiz_domain_entity.Submission'
                        type: array
                    type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all submissions
      tags:
      - submissions
    post:
      consumes:
      - application/json
      description: Create a new submission with the provided information
      parameters:
      - description: Submission information
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.SubmissionDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Submission'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new submission
      tags:
      - submissions
  /submissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a submission by its ID
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a submission
      tags:
      - submissions
    get:
      consumes:
      - application/json
      description: Get details of a specific submission by its ID
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Submission'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get submission by ID
      tags:
      - submissions
    put:
      consumes:
      - application/json
      description: Update a submission with the provided information
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated submission information
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.SubmissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.Submission'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update an existing submission
      tags:
      - submissions
  /submissions/bulk:
    post:
      consumes:
      - application/json
      description: Create multiple submissions in a single request
      parameters:
      - description: Multiple submission information
        in: body
        name: submissions
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.SubmissionInsertDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/app_pkg_quiz_domain_entity.Submission'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create multiple submissions
      tags:
      - submissions
  /tags:
    get:
      consumes:
      - application/json
      description: Get all tags with pagination and filtering options
      parameters:
      - description: Search keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/app_pkg_article_domain_entity.Tag'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all tags
      tags:
      - tags
    post:
      consumes:
      - application/json
      description: Create a new tag with the provided information
      parameters:
      - description: Tag information
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/app_pkg_article_domain_entity.TagDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Tag'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new tag
      tags:
      - tags
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a tag by its ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a tag
      tags:
      - tags
    get:
      consumes:
      - application/json
      description: Get details of a specific tag by its ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Tag'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get tag by ID
      tags:
      - tags
    put:
      consumes:
      - application/json
      description: Update a tag with the provided information
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated tag information
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/app_pkg_article_domain_entity.TagDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Tag'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update an existing tag
      tags:
      - tags
  /tags/article/{articleId}:
    get:
      consumes:
      - application/json
      description: Get all tags associated with a specific article
      parameters:
      - description: Article ID
        in: path
        name: articleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/app_pkg_article_domain_entity.Tag'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get tags by article
      tags:
      - tags
  /tags/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Get details of a specific tag by its slug
      parameters:
      - description: Tag slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_article_domain_entity.Tag'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get tag by slug
      tags:
      - tags
  /users:
    get:
      consumes:
      - application/json
      description: Get all users with pagination and filtering options
      parameters:
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/http.PaginatedResponse'
                  - properties:
                      result:
                        items:
                          $ref: '#/definitions/app_pkg_quiz_domain_entity.User'
                        type: array
                    type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get details of a specific user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user with the provided information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/app_pkg_quiz_domain_entity.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/app_pkg_quiz_domain_entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation.ValidationError'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update an existing user
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: API key authentication
    in: header
    name: X-API-Key
    type: apiKey
  BearerAuth:
    description: JWT authorization with Bearer prefix
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
